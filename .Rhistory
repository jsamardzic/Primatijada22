foo <- function(x)
{
temp <- (c(mean(x), median(x), sd(x)))
return (temp)
}
ds <- apply(data5, 2, foo)
row.names(ds) <- c("Mean", "Median", "Standard deviation")
ds
## ispisujemo srednju vrednost, medijanu i standardnu devijaciju
fun <- function(x)
{
return(x[1]/x[8]*1000)
}
apply(data5, 1, fun)
## ispisuje gustinu naseljenosti po saveznim drzavama
##            PRVI ZADATAK
A<-matrix(-29:70,10, 10, byrow=T)
## Stavljamo brojeve od -29 do 70 u matricu
rownames(A) <- LETTERS[1:10]
colnames(A) <- letters[1:10]
A
## Dajemo vrstama i kolonama imena velikih, tj. malih slova A do J
s <- 0
for(row in 1:10)
for(col in 1:10)
if(A[row, col] %% 4 == 0)
s <- s + A[row, col]
s
## Izracunavamo zbir brojeva deljivih sa 4
## deo pod b)
Sis <- matrix(c(14, 5, 5, 2, 8, 3, 4, 4, 6, 7, 3, 7, 16, 6, 1, 9), 4, 4, byrow = T)
B <- matrix(c(2, 2, 3, 3), 4, 1)
## Unosimo podatke za resavanje sistema
solve(Sis,B)
##          DRUGI ZADATAK
InsectSprays
## Ova baza sadrzi podatke o broju insekata u razlicitim poljoprivrednim jedinicama
## koje su prskane razlicitim insekticidima
a <- subset(InsectSprays, InsectSprays$spray =='A')
b <- subset(InsectSprays, InsectSprays$spray =='B')
c <- subset(InsectSprays, InsectSprays$spray =='C')
## Pravimo pomocne baze koje sadrze samo A,B i C elemente
lista <- list(SPRAY = sapply(InsectSprays, levels), ABC = c(mean(a$count), mean(b$count), mean(c$count)), MAX = subset(InsectSprays, InsectSprays$count == max(InsectSprays$count)))
lista
## Formiramo listu koja je trazena
##        TRECI ZADATAK
library(PASWR)
data = Battery
data
## Imamo dve kolone, prva su baterije kojima je ocekivano vreme trajanja 180 sati(facilityA), a druga baterije kojima je ocekivano vreme trajanja 200 sati (facilityB)
newData <- subset(data, data$facilityA > 180 & data$facilityB > 200)
round(newData, 2)
newData
write.table(newData, "domaci.txt", sep = "~~~")
##        CETVRTI ZADATAK
funkcijaA <- function(x)
{
if(is.numeric(x))
return (max(x))
for (i in x) {
if(! is.character(i))
return(FALSE)
}
if(length(x) > 10)
return(TRUE)
return(FALSE)
}
# Funkcija is.character vraca TRUE ukoliko postoji barem jedan element vektora koji je karakter
#(ukoliko je to dovoljno da bi vektor bio niz karaktera dovoljno je umesto for petlje izvrsiti
##samo proveru if(!is.character(x)) return false )
funkcijaB <- function(n,x)
{
fac <- 1
step <- 1
appr <- 1
for (i in 1:n) {
step <- step * x
fac <- fac * n
appr <- appr + step/fac
}
return(c(appr, abs(exp(x) - appr)))
}
funkcijaB(1,1)
## Mozemo koristiti i factorial() i '^'() umesto pravljenja fac i step promenljivih
## Funkcija vraca prvo aproksimaciju a zatim i gresku kao elemente vektora
##        PETI ZADATAK
library(MASS)
data5 <- state.x77
data5 <- t(rbind(t(data5), state.region))
## Matrica sa 50 redova i 8 kolona u kojoj se nalaze podaci o americkim saveznim drzavama poput populacije, prosecne zarade, procenta pismenosti, itd.
foo <- function(x)
{
temp <- (c(mean(x), median(x), sd(x)))
return (temp)
}
ds <- apply(data5, 2, foo)
row.names(ds) <- c("Mean", "Median", "Standard deviation")
ds
## ispisujemo srednju vrednost, medijanu i standardnu devijaciju
fun <- function(x)
{
return(x[1]/x[8]*1000)
}
apply(data5, 1, fun)
## ispisuje gustinu naseljenosti po saveznim drzavama
##            PRVI ZADATAK
A<-matrix(-29:70,10, 10, byrow=T)
## Stavljamo brojeve od -29 do 70 u matricu
rownames(A) <- LETTERS[1:10]
colnames(A) <- letters[1:10]
A
## Dajemo vrstama i kolonama imena velikih, tj. malih slova A do J
s <- 0
for(row in 1:10)
for(col in 1:10)
if(A[row, col] %% 4 == 0)
s <- s + A[row, col]
s
## Izracunavamo zbir brojeva deljivih sa 4
## deo pod b)
Sis <- matrix(c(14, 5, 5, 2, 8, 3, 4, 4, 6, 7, 3, 7, 16, 6, 1, 9), 4, 4, byrow = T)
B <- matrix(c(2, 2, 3, 3), 4, 1)
## Unosimo podatke za resavanje sistema
solve(Sis,B)
##          DRUGI ZADATAK
InsectSprays
## Ova baza sadrzi podatke o broju insekata u razlicitim poljoprivrednim jedinicama
## koje su prskane razlicitim insekticidima
a <- subset(InsectSprays, InsectSprays$spray =='A')
b <- subset(InsectSprays, InsectSprays$spray =='B')
c <- subset(InsectSprays, InsectSprays$spray =='C')
## Pravimo pomocne baze koje sadrze samo A,B i C elemente
lista <- list(SPRAY = sapply(InsectSprays, levels), ABC = c(mean(a$count), mean(b$count), mean(c$count)), MAX = subset(InsectSprays, InsectSprays$count == max(InsectSprays$count)))
lista
## Formiramo listu koja je trazena
##        TRECI ZADATAK
library(PASWR)
data = Battery
data
## Imamo dve kolone, prva su baterije kojima je ocekivano vreme trajanja 180 sati(facilityA), a druga baterije kojima je ocekivano vreme trajanja 200 sati (facilityB)
newData <- subset(data, data$facilityA > 180 & data$facilityB > 200)
round(newData, 2)
newData
write.table(newData, "domaci.txt", sep = "~~~")
##        CETVRTI ZADATAK
funkcijaA <- function(x)
{
if(is.numeric(x))
return (max(x))
for (i in x) {
if(! is.character(i))
return(FALSE)
}
if(length(x) > 10)
return(TRUE)
return(FALSE)
}
# Funkcija is.character vraca TRUE ukoliko postoji barem jedan element vektora koji je karakter
#(ukoliko je to dovoljno da bi vektor bio niz karaktera dovoljno je umesto for petlje izvrsiti
##samo proveru if(!is.character(x)) return false )
funkcijaB <- function(n,x)
{
fac <- 1
step <- 1
appr <- 1
for (i in 1:n) {
step <- step * x
fac <- fac * n
appr <- appr + step/fac
}
return(c(appr, abs(exp(x) - appr)))
}
funkcijaB(1,1)
## Mozemo koristiti i factorial() i '^'() umesto pravljenja fac i step promenljivih
## Funkcija vraca prvo aproksimaciju a zatim i gresku kao elemente vektora
##        PETI ZADATAK
library(MASS)
data5 <- state.x77
data5 <- t(rbind(t(data5), state.region))
## Matrica sa 50 redova i 8 kolona u kojoj se nalaze podaci o americkim saveznim drzavama poput populacije, prosecne zarade, procenta pismenosti, itd.
foo <- function(x)
{
temp <- (c(mean(x), median(x), sd(x)))
return (temp)
}
ds <- apply(data5, 2, foo)
row.names(ds) <- c("Mean", "Median", "Standard deviation")
ds
## ispisujemo srednju vrednost, medijanu i standardnu devijaciju
fun <- function(x)
{
return(x[1]/x[8]*1000)
}
apply(data5, 1, fun)
## ispisuje gustinu naseljenosti po saveznim drzavama
## ispisuje gustinu naseljenosti po saveznim drzavama
apply(data5[,1], 1, sum)
## ispisuje gustinu naseljenosti po saveznim drzavama
apply(data5, 1, sum)
## ispisuje gustinu naseljenosti po saveznim drzavama
apply(data5, 2, sum)
## ispisuje gustinu naseljenosti po saveznim drzavama
apply(data5$Population,sum)
## ispisuje gustinu naseljenosti po saveznim drzavama
apply(data5$Population, 1, sum)
help(apply)
## ispisuje gustinu naseljenosti po saveznim drzavama
sapply(data5$Population, sum)
sapply(df$Population, sum)
## ispisuje gustinu naseljenosti po saveznim drzavama
df <- data.frame(data5)
sapply(df$Population, sum)
sapply(df$Area,sum)
den <- pop/are
pop <- sapply(df$Population, sum)
are <- sapply(df$Area,sum)
den <- pop/are
den
den <- (pop/are)*1000
den
by(df,df$state.region,sum)
by(df$Population,df$state.region,sum)
by(df$Area,df$state.region,sum)
pop <- by(df$Population,df$state.region,sum)
are <- by(df$Area,df$state.region,sum)
den <- (pop/are)*1000
den
state.region
data5 <- cbind(data5, state.region)
data5
data5 <- state.x77
data5 <- t(rbind(t(data5), state.region))
## ispisuje gustinu naseljenosti po saveznim drzavama
df <- data.frame(data5)
tapply(df$Population, factor(df$state.region, labels = c("West", "East", "North", "South"), sum)
aa <- tapply(df$Population, factor(df$state.region, labels = c("West", "East", "North", "South"), sum)
aa <- tapply(df$Population, factor(df$state.region, labels = c("West", "East", "North", "South"), sum))
aa <- tapply(df$Population, factor(df$state.region, labels = c("West", "East", "North", "South")), sum)
aa
bb
bb <- tapply(df$Area,factor(df$state.region, labels = c("West", "East", "North", "South")), sum)
bb
cc <- aa/bb*1000
cc
state.region
df
aa <- tapply(df$Population, factor(df$state.region, labels = c("Northeast", "South", "North Central", "West")), sum)
aa
bb <- tapply(df$Area,factor(df$state.region, labels = c("Northeast", "South", "North Central", "West")), sum)
bb
cc <- aa/bb*1000
cc
aa <- tapply(df$Population, factor(df$state.region, labels = c("Northeast", "South", "North Central", "West")), sum)
bb <- tapply(df$Area,factor(df$state.region, labels = c("Northeast", "South", "North Central", "West")), sum)
cc <- aa/bb*1000
cc
aa <- tapply(df$Population, factor(df$state.region, labels = c("Northeast", "South", "North Central", "West")), sum)
bb <- tapply(df$Area,factor(df$state.region, labels = c("Northeast", "South", "North Central", "West")), sum)
cc <- aa/bb*1000
cc
w <- c("a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", 10, "a")
funkcijaA(w)
xx <- c(1, 'a')
funkcijaA(xx)
funkcijaA <- function(x)
{
if(is.numeric(x))
return (max(x))
for (i in x) {
if(! is.character(i))
return(FALSE)
}
if(length(x) > 10)
return(TRUE)
return ('x')
}
xx <- c(1, 'a')
funkcijaA(xx)
a <- subset(InsectSprays, InsectSprays$spray =='A')
b <- subset(InsectSprays, InsectSprays$spray =='B')
c <- subset(InsectSprays, InsectSprays$spray =='C')
## Pravimo pomocne baze koje sadrze samo A,B i C elemente
lista <- list(SPRAY = sapply(InsectSprays, levels), ABC = c(mean(a$count), mean(b$count), mean(c$count)), MAX = subset(InsectSprays, InsectSprays$count == max(InsectSprays$count)))
lista
lista <- list(SPRAY = sapply(InsectSprays$spray, levels), ABC = c(mean(a$count), mean(b$count), mean(c$count)), MAX = subset(InsectSprays, InsectSprays$count == max(InsectSprays$count)))
lista
lista <- list(SPRAY = sapply(InsectSprays, levels), ABC = c(mean(a$count), mean(b$count), mean(c$count)), MAX = subset(InsectSprays, InsectSprays$count == max(InsectSprays$count)))
lista
lista <- list('SPRAY' = sapply(InsectSprays, levels), 'ABC' = c(mean(a$count), mean(b$count), mean(c$count)), 'MAX' = subset(InsectSprays, InsectSprays$count == max(InsectSprays$count)))
lista
lista <- list('SPRAY' = sapply(InsectSprays$spray, levels), 'ABC' = c(mean(a$count), mean(b$count), mean(c$count)), 'MAX' = subset(InsectSprays, InsectSprays$count == max(InsectSprays$count)))
lista
lista <- list('SPRAY' = sapply(InsectSprays$spray, unique), 'ABC' = c(mean(a$count), mean(b$count), mean(c$count)), 'MAX' = subset(InsectSprays, InsectSprays$count == max(InsectSprays$count)))
lista
lista <- list('SPRAY' = sapply(InsectSprays, unique), 'ABC' = c(mean(a$count), mean(b$count), mean(c$count)), 'MAX' = subset(InsectSprays, InsectSprays$count == max(InsectSprays$count)))
lista
lista <- list('SPRAY' = sapply(InsectSprays$spray, unique), 'ABC' = c(mean(a$count), mean(b$count), mean(c$count)), 'MAX' = subset(InsectSprays, InsectSprays$count == max(InsectSprays$count)))
lista
x <- c(1,2,1,3,2,4,3,2,1)
unique(x)
lista <- list('SPRAY' = unique(InsectSprays$spray), 'ABC' = c(mean(a$count), mean(b$count), mean(c$count)), 'MAX' = subset(InsectSprays, InsectSprays$count == max(InsectSprays$count)))
lista
lista <- list('SPRAY' = unique(InsectSprays[c('spray')]), 'ABC' = c(mean(a$count), mean(b$count), mean(c$count)), 'MAX' = subset(InsectSprays, InsectSprays$count == max(InsectSprays$count)))
lista
lista <- list('SPRAY' = unique(InsectSprays$spray[c('spray')]), 'ABC' = c(mean(a$count), mean(b$count), mean(c$count)), 'MAX' = subset(InsectSprays, InsectSprays$count == max(InsectSprays$count)))
lista
lista <- list('SPRAY' = unique(InsectSprays[c('spray')]$spray), 'ABC' = c(mean(a$count), mean(b$count), mean(c$count)), 'MAX' = subset(InsectSprays, InsectSprays$count == max(InsectSprays$count)))
lista
lista <- list('SPRAY' = unique(InsectSprays$spray), 'ABC' = c(mean(a$count), mean(b$count), mean(c$count)), 'MAX' = subset(InsectSprays, InsectSprays$count == max(InsectSprays$count)))
lista
spray
##        PETI ZADATAK
spray
##        PETI ZADATAK
factor(spray)
df <- data.frame(data5)
aa <- tapply(df$Population, factor(df$state.region, labels = c("Northeast", "South", "North Central", "West")), sum)
bb <- tapply(df$Area,factor(df$state.region, labels = c("Northeast", "South", "North Central", "West")), sum)
cc <- aa/bb*1000
cc
## Unosimo podatke za resavanje sistema
solve(Sis,B)
lista <- list('SPRAY' = unique(InsectSprays$spray), 'ABC' = c(mean(a$count), mean(b$count), mean(c$count)), 'MAX' = subset(InsectSprays, InsectSprays$count == max(InsectSprays$count)))
lista
round(newData, 2)
write.table(newData, "domaci.txt", sep = "~~~")
## Unosimo podatke za resavanje sistema
as.vector(solve(Sis,B))
return(c(appr, abs(exp(x) - appr)))
funkcijaB <- function(n,x)
{
fac <- 1
step <- 1
appr <- 1
for (i in 1:n) {
step <- step * x
fac <- fac * n
appr <- appr + step/fac
}
return(c(appr, abs(exp(x) - appr)))
}
funkcijaB <- function(n,x)
{
fac <- 1
step <- 1
appr <- 1
for (i in 1:n) {
step <- step * x
fac <- fac * n
appr <- appr + step/fac
}
return(c(appr, abs(exp(x) - appr)))
}
funkcijaB(1,1)
head(InsectSprays)
ds
areaAverage <- tapply(df$Population, factor(df$state.region, labels = c("Northeast", "South", "North Central", "West")), sum)/tapply(df$Area,factor(df$state.region, labels = c("Northeast", "South", "North Central", "West")), sum)*1000
areaAverage
N <- 25
total <- 0
for (i in 1:1000000)
{
curr <- 0
pos <- 14.5
while(pos>0)
{
pos <- pos+ sample(movement,size = 1, prob = c(p,1-p))
curr <- curr +1
}
if(curr == N)
total <- total +1
}
total <- total/1000000
total
#-----------------------PRVI ZADATAK---------------------------
movement <- c(-1,1)
pos <- 14.5
p<- 0.7
positions <- c(pos)
#Simulacija eksperimenta
while(pos > 0)
{
pos <- pos + sample(movement,size = 1, prob = c(p,1-p))
positions <- c(positions,pos)
}
#Grafik
plot(0:(length(positions)-1),positions,type="l",xlab="Broj koraka",ylab="Rastojanje")
# Simulacija Monte-Karlo metodom
N <- 25
total <- 0
for (i in 1:1000000)
{
curr <- 0
pos <- 14.5
while(pos>0)
{
pos <- pos+ sample(movement,size = 1, prob = c(p,1-p))
curr <- curr +1
}
if(curr == N)
total <- total +1
}
total <- total/1000000
total
data("DoctorVisits", package = "AER")
package(AER)
data("DoctorVisits")
library(readxl)
DoctorVisits <- read_excel("C:/Users/JAVOR/Desktop/Downloads/DoctorVisits.csv")
View(DoctorVisits)
data("DoctorVisits")
DoctorVisits <- read.csv("C:/Users/JAVOR/Desktop/Downloads/DoctorVisits.csv")
View(DoctorVisits)
data("DoctorVisits")
DoctorVisits$gender
DoctorVisits$gender == "male"
mean(DoctorVisits$visits[DoctorVisits$gender == "male"])
mean(DoctorVisits$visits[DoctorVisits$gender == "female"])7
mean(DoctorVisits$visits[DoctorVisits$gender == "female"])
mean(DoctorVisits$income[DoctorVisits$gender == "female"])
mean(DoctorVisits$income[DoctorVisits$gender == "male"])
data("DoctorVisits", package = "AER")
library("MASS")
data("DoctorVisits", package = "AER")
data("DoctorVisits")
install(AER)
CRAN
library(AER)
install.packages("AER")
package("DoctorVisits" from "AER")
data("DoctorVisits" from "AER")
data("DoctorVisits")
package("AER")
library("AER")
data("DoctorVisits")
d<-data("DoctorVisits")
d
summary(data("DoctorVisits"))
data("DoctorVisits", package = "AER")
d<-data("DoctorVisits", package = "AER")
d
help("AER")
??AER
data("DoctorVisits")
summary(data("DoctorVisits"))
library("MASS")
data("DoctorVisits", package = "AER")
print(data("DoctorVisits", package = "AER"))
library("AER")
data("DoctorVisits")
d<-data("DoctorVisits")
d
d<-dataset("DoctorVisits")
d<-data("DoctorVisits")
d
library("AER")
d<-data("DoctorVisits")
d
summary(dv_lm)
dv_lm <- lm(visits ~ . + I(age^2), data = DoctorVisits)
summary(dv_lm)
data("DoctorVisits", package = "AER")
d<-data("DoctorVisits", package = "AER")
d
data("DoctorVisits")
data("DoctorVisits")
library(AER)
data("DoctorVisits")
df <- data("DoctorVisits")
q()
library(AER)
data(DoctorVisits)
library(AER)
df <- data(DoctorVisits)
df
print(data(DoctorVisits))
summary(DoctorVisits)
piechart(data = DoctorVisits$gender)
pc(data = DoctorVisits$gender)
data("DoctorVisits")
pc(data = DoctorVisits$gender)
pie(data = DoctorVisits$gender)
male <- count(DoctorVisits$gender == "male")
male <- count(DoctorVisits)
male <- sum(DoctorVisits$gender=='male')
male <- sum(DoctorVisits$gender=='male')
female <- sum(DoctorVisits$gender=='female')
pie(c(male,female))
pie(c(male,female),c('Male','Female'))
pie(c(male,female),pct)
pct <- round(c(male,female)/sum(c(male,female))*100)
pie(c(male,female),pct)
pie(c(male,female),c('Male','Female'))
pie(c(male,female),c('Male','Female'),  edges = 400)
pie(c(male,female),c('Male','Female'),  edges = 4000)
pie(c(male,female),c('Male','Female'))
data(anorexia)
writexl::write_xlsx(data.frame(names(modelRandomForest(dfSimple, 0.75, 1000, 500)),modelRandomForest(dfSimple, 0.75, 1000, 500)),"./data/RF.xlsx")
setwd("C:/Users/JAVOR/Desktop/R/Primatijada22")
source("./kodovi/libPrimatijada22.R")
df <- cleanupDataFrame(readxl::read_xlsx("./data/NBA_DataSet_Version1.xlsx"))
dfSimple <- simplifyDataFrame(df)
writexl::write_xlsx(data.frame(names(modelRandomForest(dfSimple, 0.75, 1000, 500)),modelRandomForest(dfSimple, 0.75, 1000, 500)),"./data/RF.xlsx")
modelRandomForest <- function(df, q, s, n){
lista <- generateTrainingData(dfSimple, q, s)
trainingData <- lista[[1]]
predictionData <- lista[[2]]
model <- randomForest(WL~.-diffFGpct, data = trainingData, ntree=n)
df1 <- model$importance[order(model$importance[,1],decreasing=T),]
calculateAccuracy(model, predictionData)
}
modelRandomForest(dfSimple, 0.75, 1000, 500)
